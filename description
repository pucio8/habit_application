1. Create .venv (check terminal)
2. Install Django
3. django-admin.exe startproject habits_application . # manage.py has created
4. test server #python manage.py runserver
5. create habit #python manage.py startapp habit
6. create class habit(Models.model)
    def score(self): return

    start_date = self.created_at.date()
    today = date.today()
    days_active = (today - self.created_at.date()).days + 1
    if self.duration_days and not self.is_unlimited():
        days_active = min(self.duration_days, days_active)
    if days_active == 0:
        return 0 #score = 0%

7. admin (register model) admin.site.register(Habit)
8. settings - add my model in INSTALLED_APPS
9. settings - change language, time, static_rot, allowed_hosts
10.
├── habit
     ├── static
              └── css
     ├── templates
              └── habit
     ├── templatetags
              └── __init__
              └── custom_filters.py

python manage.py makemigrations habit
python manage.py migrate
11. Create superuser
== Add code in GitHube ==
git branch -m master main (chane main branch name) #change master -> main
git remote add origin https://github.com/pucio8/habits_application.git #add origin (origin = url to repo)
git pull --rebase origin main #pull repo with github (gitignore, readme)
git push --set-upstream origin main #push and set upstream (set default branch)
#testing branch
git branch
git checkout -b test-branch
# ignore desc.txt
git rm --cached description.txt
git commit -m "Ignore description.txt"
==========================

12. urls.py
    add urlpatterns -> path('', views.habit_list, name='habit_list'),
13. views.py
    def habit_list(request):
    habits = Habit.objects.order_by('created_at')
    return render(request, 'habit/habit_list.html', {'habits': habits})
14. add some habits to testing app :))

===ORM===
Check Object in shell like
python manage.py shell
from habit.models import Habit
Habit.objects.all()
=====

15. Add python block in habits_list
{% for habit in habits %} #because pass {'habits':habits}

16. Template extending ( add base )
{% extends 'habit/base.html' %}
{% load static %}
{% block content %}
{% for habit in habits %}
{{habit.name}}, {{habit.color}} etc.method {{habit.score}} (like variables)
{% endblock %}

17. Add habit (form)
create #forms.py
create class HabitForm(forms.ModelForm):
    class Meta:
        model = Habit
        fields = ('name', 'description', 'color', 'frequency', 'duration_days', 'is_unlimited')
        widgets = {
            'duration_days': forms.NumberInput(attrs={'id': 'duration-field'}),
            'is_unlimited': forms.CheckboxInput(attrs={'id': 'unlimited-checkbox'}),
        }
habit_list add link ->
<a href="{% url 'habit_add' %}">
#urls.py
    path('habit_add/', views.habit_add, name='habit_add'),
#views.py
    def habit_add(request)
    if form.is_valid():
         habit = form.save(commit=False)
            habit.user = request.user
            habit.save()
#template/habit/habit_add.html
     <button type="submit" form="habit-form" class="btn btn-link">Done</button>
    <form id="habit-form" method="POST" class="post-form"> {% csrf_token %}
    {{ form.as_p }}
    </form>

18. Detail (Simple version) for add button edit
# in habit_list add link to -> <a {% url "habit_details" pk=habit.pk %}> Details </a>
#urls.py
    path('habit_detail/<int:pk>/', views.habit.habit_detail, name='habit_detail)
#views.py
    def habit_detail(request, pk):
    habit = get_object_or_404(Habit, pk=pk, user=request.user)
    set date -> date.today() -> today.month and today.year
    monthrange(year,month)[1] -> in april return tuple (1,31) - (first_day, last_day)
    statuses = HabitStatus.objects.filter(
        habit = habit,
        user = habit.user,
        date__year = year,
        date__month = month
    #create status_dict {1:True, .. 3:False}
    status_dict = {status.date.day :status.done for status in statuses}

    return render(request, 'habit/habit_detail.html', {
        'habit': habit,
        'status_dict': status_dict,
        'days': range(1, num_days + 1),
        'year': year,
        'month': month,
    })

#template habit_detail

19. Edit Habit
    <button><a href="{% url 'habit_edit' pk=habit.pk %}">Edit</a></button>
    #urls 'habit_edit/<int:pk>/' ,view.habit.habit_edit, name = habit_edit
    #view
    @login_required
    def habit_edit(request, pk):
    habit = get_object_or_404(Habit, pk=pk, user=request.user)
    if request.method == "POST":
        form = HabitForm(request.POST, instance= habit)
            if form.is_valid():
                habit.save()
                messages.success()
    redirect(habit_detail, pk = habit.pk)
    else:
        form = HabitForm(instance= habit) #fill fields
    render(request, habit/habit_edit.html', {'form', form}

20. Habit Delete
- habit_delete (pre)
- habit_delete_confirm (finally)
(pre) <button class="btn btn-danger"><a href="{% url 'habit_delete' pk=habit.pk %}">Delete Habit</a></button>
(finally)
<form method="post">
    {% csrf_token %}
    <button type="submit" class="btn btn-danger">Yes, delete it</button>
    <a href="{% url 'habit_detail' pk=habit.pk %}">Cancel</a>
  </form>
# urls
     path('habit/<int:pk>/delete', views.habit_delete, name='habit_delete')
# view
@login_required
def habit_delete(request, pk):
    habit = get_object.....
    if request.method == 'POST':
        habit.delete()
        messages.success
        redirect(habit_list)
    render(request, 'habit/habit_delete_confirm.html', {'habit'=habit})

=====Framework Messages=====
20. Add  Messages framework
#Succes
from django.contrib import messages
messages.success()
#add message in template
<div class="alert alert-{{ message.tags }} alert-dismissible fade show" role="alert">
{{ message }}
<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
</div>
(remember add link and script BTS)

#Delete - danger
messages.success(request, f'Habit "{habit_name}" has been successfully deleted!')
#Edited
messages.success(request, f'Habit "{habit_name}" has been successfully updated!')


21. Habit details continue...
=====model -> StatusHabit(Models.model)
user(models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)),
habit = models.ForeignKey('Habit', on_delete=models.CASCADE,
done, data
    class Meta():
         unique_together = ('user', 'habit', 'date')

register in admin
@admin.register(HabitStatus)
class HabitStatus(admin.ModelAdmin):
    list_display = ('user', 'habit', 'date', 'done') #record list
    list_filter = ('done', 'date', 'habit') #later add user
    search_fields = ('habit__name', 'user__username')

22. Calendar
#habit_calendar.html
<form id="calendar-form" method="post" action="{% url 'update_habit_calendar' pk=habit.pk %}">
#urls.py
    path( 'habit/<int:pk>/calendar', views.update_habit_calendar, name ='update_habit_calendar')
#views.py
( in form we have 2 hidden input
<input name = day> and <input name = action>

    def update_habit_calendar(request, pk):
        habit = get_or...
        day = int(request.POST.get('day')
        action = request.POST.get('action') # done, not_done, none
        today - date.today()
        chosen_date = date(today.year, today.month, day)
        if action not in ['done', 'not_done', 'none']:
            return redirect('habit_detail', pk=habit.pk)
        if action =='none':
            #delete our status
            HabitStatus.object.filter(user=request.user, habit=habit, date=chosen_date).delete()
        else:
            status, created = HabitStatus.objects.get_or_create(user=request.user,habit=habit, date=chosen_date)
            #set T or F
            status.done = (action == 'done')
            status.save()
        return redirect('habit_detail', pk=habit.pk)





// register template!!!!!!!
create templatetags
#habit
    __init__.py and custom_filters.py

from django import template
register = template.Library()

@register.filter
def get_item(dictionary, key):
    return dictionary.get(key)

#urls.py
    path('habit/<int:pk>/calendar/', views.update_habit_calendar, name='update_habit_calendar'),
#views.py
    @require_POST
def update_habit_calendar(request, pk):

#template
{% load custom_filters %}

📅 Habit calendar
<form id="calendar-form" method="post" action="{% url 'update_habit_calendar' pk=habit.pk %}">
    {% csrf_token %}
    <input type="hidden" name="day" id="selected-day">
    <input type="hidden" name="action" id="selected-action">

<div style="display: grid; grid-template-columns: repeat(7, 1fr); gap: 10px; margin-top: 1rem;">
    {% for day in days %}
        {% with status=status_dict|get_item:day %}
        <button
                type="button"
                class="day-button"
                data-day="{{ day }}"
                data-status="{% if status %}done{% elif status == False %}not_done{% else %}none{% endif %}"
                style="padding: 10px; background-color: {% if status %}lightgreen{% elif status == False %}lightcoral{% else %}lightgray{% endif %}; border: none; border-radius: 8px; cursor: pointer;">
            {{ day }}
        </button>
        {% endwith %}
    {% endfor %}
</div>

23. Make my app beauty!

24. Days in a row
25. freq...






































#Fieleds admin (magic words) =======================
list_display
list_filter
search_fields
ordering
readonly_fields
fieldsets
exclude

#orm =======================
like Habit.objects.methods......
order_by
filter
get_or_create


Świetnie, że wszystko działa! 🔥 Teraz lecimy z kolejnym krokiem: automatyczne uruchamianie skryptu .py przez .bat, a potem przez Harmonogram zadań (Task Scheduler).

🔁 Cel:
Chcesz, żeby każdego dnia automatycznie uruchamiał się ten skrypt:

Kopiuj
Edytuj
create_habit_status.py
🧾 Krok 1: Stwórz plik .bat
Otwórz Notatnik (lub edytor tekstu).

Wklej poniższy kod:

bat
Kopiuj
Edytuj
@echo off
cd /d C:\Users\ploci\PycharmProjects\Habits_Application
call .venv\Scripts\activate.bat
python habits_application\create_habit_status.py
Zapisz plik jako:
🔸 run_habit_status.bat
🔸 Upewnij się, że zapisujesz jako „Wszystkie pliki”, a nie .txt.

📁 Ścieżka cd /d ustawia folder, call activate.bat aktywuje wirtualne środowisko, python ... uruchamia Twój skrypt.

✅ Test ręczny
Kliknij dwukrotnie na run_habit_status.bat i sprawdź:

Czy widzisz komunikat z print() w konsoli?

Czy nowy wpis HabitStatus pojawił się w bazie?

📅 Krok 2: Ustaw Harmonogram zadań (Task Scheduler)
🔍 Otwórz „Harmonogram zadań” w Windows.

Wybierz "Utwórz zadanie podstawowe" (po prawej).

Nadaj nazwę, np. CodziennyHabitStatus.

Ustaw wyzwalacz:

Codziennie

Godzina np. 6:00 rano

Akcja:

Wybierz „Uruchom program”

W polu „Program/script” podaj:

makefile
Kopiuj
Edytuj
C:\Users\ploci\PycharmProjects\Habits_Application\run_habit_status.bat
Kliknij „Zakończ”.

🧪 Test Harmonogramu
Znajdź utworzone zadanie w liście.

Kliknij PPM → „Uruchom” → sprawdź, czy działa.

🧠 Podsumowanie
Krok	Status
.bat działa ręcznie?	✅
Harmonogram uruchamia .bat?	✅
Nowe HabitStatusy pojawiają się codziennie?	✅ (cel osiągnięty!)


scrypt form disabled
class HabitForm(forms.ModelForm):
    class Meta:
        model = Habit
        fields = ['name', 'description', 'color', 'frequency', 'duration_days', 'is_unlimited']
        widgets = {
            'duration_days': forms.NumberInput(attrs={'id': 'duration-field'}),
            'is_unlimited': forms.CheckboxInput(attrs={'id': 'unlimited-checkbox'}),
        }

<script>
document.addEventListener('DOMContentLoaded', function () {
    const durationInput = document.getElementById('duration-field');
    const unlimitedCheckbox = document.getElementById('unlimited-checkbox');

    function toggleCheckboxState() {
        if (durationInput.value.trim() !== '') {
            unlimitedCheckbox.disabled = true;
            unlimitedCheckbox.checked = false;
        } else {
            unlimitedCheckbox.disabled = false;
        }
    }

    // Sprawdzenie przy zmianie pola
    durationInput.addEventListener('input', toggleCheckboxState);

    // Sprawdzenie na starcie (np. przy edycji formularza)
    toggleCheckboxState();
});
</script>